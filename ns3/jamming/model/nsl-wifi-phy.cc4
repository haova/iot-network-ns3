/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*m_currentMode
 * Copyright (c) 2005,2006 INRIA
 * Copyright (c) 2010 Network Security Lab, University of Washington, Seattle.
 *
 * This program is free software; you can redistribute it and/or modifym_state
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Authors: Mathieu Lacage <mathieu.lacage@sophia.inria.fr>
 *          Sidharth Nabar <snabar@uw.edu>, He Wu <mdzz@u.washington.edu>
 */

#include "nsl-wifi-phy.h"
#include "wireless-module-utility.h"
#include "nsl-wifi-channel.h"
#include "ns3/wifi-mode.h"
#include "ns3/wifi-preamble.h"
#include "ns3/wifi-net-device.h"
#include "ns3/wifi-phy-state-helper.h"
#include "ns3/wifi-mac-header.h"
#include "ns3/error-rate-model.h"
#include "ns3/propagation-loss-model.h"
#include "ns3/energy-source.h"
#include "ns3/simulator.h"
#include "ns3/packet.h"
#include "ns3/random-variable-stream.h"
#include "ns3/assert.h"
#include "ns3/log.h"
#include "ns3/double.h"
#include "ns3/uinteger.h"
#include "ns3/enum.h"
#include "ns3/pointer.h"
#include "ns3/net-device.h"
#include "ns3/node.h"
#include "ns3/trace-source-accessor.h"

NS_LOG_COMPONENT_DEFINE ("NslWifiPhy");

namespace ns3 {

NS_OBJECT_ENSURE_REGISTERED (NslWifiPhy);

TypeId
NslWifiPhy::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::NslWifiPhy")
    .SetParent<WifiPhy> ()
    .AddConstructor<NslWifiPhy> ()
    .AddAttribute ("NslEnergyDetectionThreshold",
                   "The energy of a received signal should be higher than "
                   "this threshold (dBm) to allow the PHY layer to detect the signal.",
                   DoubleValue (-140.0),
                   MakeDoubleAccessor (&NslWifiPhy::SetEdThreshold,
                                       &NslWifiPhy::GetEdThreshold),
                   MakeDoubleChecker<double> ())
    .AddAttribute ("NslCcaMode1Threshold",
                   "The energy of a received signal should be higher than "
                   "this threshold (dBm) to allow the PHY layer to declare CCA BUSY state",
                   DoubleValue (-140.0),
                   MakeDoubleAccessor (&NslWifiPhy::SetCcaMode1Threshold,
                                       &NslWifiPhy::GetCcaMode1Threshold),
                   MakeDoubleChecker<double> ())
    .AddAttribute ("NslTxGain",
                   "Transmission gain (dB).",
                   DoubleValue (1.0),
                   MakeDoubleAccessor (&NslWifiPhy::SetTxGain,
                                       &NslWifiPhy::GetTxGain),
                   MakeDoubleChecker<double> ())
    .AddAttribute ("NslRxGain",
                   "Reception gain (dB).",
                   DoubleValue (1.0),
                   MakeDoubleAccessor (&NslWifiPhy::SetRxGain,
                                       &NslWifiPhy::GetRxGain),
                   MakeDoubleChecker<double> ())
    .AddAttribute ("NslTxPowerLevels",
                   "Number of transmission power levels available between "
                   "TxPowerBase and TxPowerEnd included.",
                   UintegerValue (1),
                   MakeUintegerAccessor (&NslWifiPhy::m_nTxPower),
                   MakeUintegerChecker<uint32_t> ())
    .AddAttribute ("NslTxPowerEnd",
                   "Maximum available transmission level (dBm).",
                   DoubleValue (16.0206),
                   MakeDoubleAccessor (&NslWifiPhy::SetTxPowerEnd,
                                       &NslWifiPhy::GetTxPowerEnd),
                   MakeDoubleChecker<double> ())
    .AddAttribute ("NslTxPowerStart",
                   "Minimum available transmission level (dBm).",
                   DoubleValue (16.0206),
                   MakeDoubleAccessor (&NslWifiPhy::SetTxPowerStart,
                                       &NslWifiPhy::GetTxPowerStart),
                   MakeDoubleChecker<double> ())
    .AddAttribute ("NslRxNoiseFigure",
                   "Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver."
                   " According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "
                   "\"the difference in decibels (dB) between"
                   " the noise output of the actual receiver to the noise output of an "
                   " ideal receiver with the same overall gain and bandwidth when the receivers "
                   " are connected to sources at the standard noise temperature T0 (usually 290 K)\"."
                   " For",
                   DoubleValue (7),
                   MakeDoubleAccessor (&NslWifiPhy::SetRxNoiseFigure,
                                       &NslWifiPhy::GetRxNoiseFigure),
                   MakeDoubleChecker<double> ())
    .AddAttribute ("NslState", "The state of the PHY layer",
                   PointerValue (),
                   MakePointerAccessor (&NslWifiPhy::m_state),
                   MakePointerChecker<WifiPhyStateHelper> ())
    .AddAttribute ("NslChannelSwitchDelay",
                   "Delay between two short frames transmitted on different frequencies. NOTE: Unused now.",
                   TimeValue (MicroSeconds (250)),
                   MakeTimeAccessor (&NslWifiPhy::m_channelSwitchDelay),
                   MakeTimeChecker ())
    .AddAttribute ("NslChannelNumber",
                   "Channel center frequency = Channel starting frequency + 5 MHz * (nch - 1)",
                   UintegerValue (1),
                   MakeUintegerAccessor (&NslWifiPhy::SetChannelNumber,
                                         &NslWifiPhy::GetChannelNumber),
                   MakeUintegerChecker<uint16_t> ())
    ;
  return tid;
}

NslWifiPhy::NslWifiPhy ()
  :  m_channelNumber (1),
     m_endRxEvent (),
     m_random (0.0, 1.0),
     m_channelStartingFrequency (0),
     m_isDriverInitialized (false)
{
  NS_LOG_FUNCTION (this);
  m_state = CreateObject<WifiPhyStateHelper> ();
  ResetDriver ();
}

NslWifiPhy::~NslWifiPhy ()
{
  NS_LOG_FUNCTION (this);
}

void
NslWifiPhy::DoStart (void)
{
  NS_LOG_FUNCTION (this);
  InitDriver ();  // initialize driver at beginning of simulation
}

void
NslWifiPhy::DoDispose (void)
{
  NS_LOG_FUNCTION (this);
  m_channel = 0;
  m_modes.clear ();
  m_device = 0;
  m_mobility = 0;
  m_state = 0;
  m_node = 0;
  ResetDriver (); // driver not initialized
}

void
NslWifiPhy::ConfigureStandard (enum WifiPhyStandard standard)
{
  NS_LOG_FUNCTION (this << standard);
  switch (standard) {
  case WIFI_PHY_STANDARD_80211a:
    Configure80211a ();
    break;
  case WIFI_PHY_STANDARD_80211b:
    Configure80211b ();
    break;
  case WIFI_PHY_STANDARD_80211_10Mhz:
    Configure80211_10Mhz ();
    break;
  case WIFI_PHY_STANDARD_80211_5Mhz:
    Configure80211_5Mhz ();
    break;
  case WIFI_PHY_STANDARD_holland:
    ConfigureHolland ();
    break;
  default:
    NS_ASSERT (false);
    break;
  }
}

void
NslWifiPhy::SetRxNoiseFigure (double noiseFigureDb)
{
  NS_LOG_FUNCTION (this << noiseFigureDb);
  m_interference.SetNoiseFigure (DbToRatio (noiseFigureDb));
}
void
NslWifiPhy::SetTxPowerStart (double start)
{
  NS_LOG_FUNCTION (this << start);
  m_txPowerBaseDbm = start;
}
void
NslWifiPhy::SetTxPowerEnd (double end)
{
  NS_LOG_FUNCTION (this << end);
  m_txPowerEndDbm = end;
}
void
NslWifiPhy::SetNTxPower (uint32_t n)
{
  NS_LOG_FUNCTION (this << n);
  m_nTxPower = n;
}
void
NslWifiPhy::SetTxGain (double gain)
{
  NS_LOG_FUNCTION (this << gain);
  m_txGainDb = gain;
}
void
NslWifiPhy::SetRxGain (double gain)
{
  NS_LOG_FUNCTION (this << gain);
  m_rxGainDb = gain;
}
void
NslWifiPhy::SetEdThreshold (double threshold)
{
  NS_LOG_FUNCTION (this << threshold);
  m_edThresholdW = DbmToW (threshold);
}
void
NslWifiPhy::SetCcaMode1Threshold (double threshold)
{
  NS_LOG_FUNCTION (this << threshold);
  m_ccaMode1ThresholdW = DbmToW (threshold);
}
void
NslWifiPhy::SetErrorRateModel (Ptr<ErrorRateModel> rate)
{
  m_interference.SetErrorRateModel (rate);
}
void
NslWifiPhy::SetDevice (Ptr<Object> device)
{
  m_device = device;
}
void
NslWifiPhy::SetMobility (Ptr<Object> mobility)
{
  m_mobility = mobility;
}

double
NslWifiPhy::GetRxNoiseFigure (void) const
{
  return RatioToDb (m_interference.GetNoiseFigure ());
}
double
NslWifiPhy::GetTxPowerStart (void) const
{
  return m_txPowerBaseDbm;
}
double
NslWifiPhy::GetTxPowerEnd (void) const
{
  return m_txPowerEndDbm;
}
double
NslWifiPhy::GetTxGain (void) const
{
  return m_txGainDb;
}
double
NslWifiPhy::GetRxGain (void) const
{
  return m_rxGainDb;
}

double
NslWifiPhy::GetEdThreshold (void) const
{
  return WToDbm (m_edThresholdW);
}

double
NslWifiPhy::GetCcaMode1Threshold (void) const
{
  return WToDbm (m_ccaMode1ThresholdW);
}

Ptr<ErrorRateModel>
NslWifiPhy::GetErrorRateModel (void) const
{
  return m_interference.GetErrorRateModel ();
}

Ptr<Object>
NslWifiPhy::GetDevice (void) const
{
  return m_device;
}

Ptr<Object>
NslWifiPhy::GetMobility (void)
{
  return m_mobility;
}

double
NslWifiPhy::CalculateSnr (WifiMode txMode, double ber) const
{
  return m_interference.GetErrorRateModel ()->CalculateSnr (txMode, ber);
}

Ptr<WifiChannel>
NslWifiPhy::GetChannel (void) const
{
  return m_channel;
}
void
NslWifiPhy::SetChannel (Ptr<NslWifiChannel> channel)
{
  m_channel = channel;
  m_channel->Add (this);
  m_channelNumber = 1;      // always start on channel starting frequency (channel 1)
}

void
NslWifiPhy::SetChannelNumber (uint16_t nch)
{
  if (Simulator::Now () == Seconds (0))
    {
      // this is not channel switch, this is initialization
      NS_LOG_DEBUG("start at channel " << nch);
      m_channelNumber = nch;
      return;
    }

  NS_ASSERT(!IsStateSwitching ());
  NS_LOG_DEBUG ("NslWifiPhy:Attempting to set channel number to " << nch);
  switch (m_state->GetState ()) {
  case NslWifiPhy::RX:
    NS_LOG_DEBUG ("drop packet because of channel switching while reception");
    m_endRxEvent.Cancel();
    goto switchChannel;
    break;
  case NslWifiPhy::TX:
    NS_LOG_DEBUG ("channel switching postponed until end of current transmission");
    Simulator::Schedule (GetDelayUntilIdle(), &NslWifiPhy::SetChannelNumber, this, nch);
    break;
  case NslWifiPhy::CCA_BUSY:
  case NslWifiPhy::IDLE:
    goto switchChannel;
    break;
  default:
    NS_ASSERT (false);
    break;
  }

  return;

  switchChannel:

  NS_LOG_DEBUG("NslWifiPhy:switching channel " << m_channelNumber << " -> "
      << nch << ", At time = " << Simulator::Now ().GetSeconds () << "s");
  m_state->SwitchToChannelSwitching(m_channelSwitchDelay);
  m_interference.EraseEvents();
  /*
   * Needed here to be able to correctly sensed the medium for the first
   * time after the switching. The actual switching is not performed until
   * after m_channelSwitchDelay. Packets received during the switching
   * state are added to the event list and are employed later to figure
   * out the state of the medium after the switching.
   */
  m_channelNumber = nch;

  /*
   * Driver interface.
   */
  UpdatePhyLayerInfo ();
}

uint16_t
NslWifiPhy::GetChannelNumber() const
{
  return m_channelNumber;
}

double
NslWifiPhy::GetChannelFrequencyMhz() const
{
  return m_channelStartingFrequency + 5 * (GetChannelNumber() - 1);
}

/*void
NslWifiPhy::SetReceiveOkCallback (RxOkCallback callback)
{
  m_state->SetReceiveOkCallback (callback);
}
void
NslWifiPhy::SetReceiveErrorCallback (RxErrorCallback callback)
{
  m_state->SetReceiveErrorCallback (callback);
}*/
void
NslWifiPhy::StartReceivePacket (Ptr<Packet> packet,
                                double rxPowerDbm,
                                WifiMode txMode,
                                enum WifiPreamble preamble)
{
  NS_LOG_FUNCTION (this << packet << rxPowerDbm << txMode << preamble);
  rxPowerDbm += m_rxGainDb;
  double rxPowerW = DbmToW (rxPowerDbm);
  Time rxDuration = CalculateTxDuration (packet->GetSize (), txMode, preamble);
  Time endRx = Simulator::Now () + rxDuration;

  Ptr<InterferenceHelper::Event> event;
  event = m_interference.Add (packet->GetSize (),
                              txMode,
                              preamble,
                              rxDuration,
                              rxPowerW);

  /*
   * Driver interface.
   */
  SetCurrentWifiMode (event->GetPayloadMode ());

  switch (m_state->GetState ()) {
  case NslWifiPhy::SWITCHING:
    NS_LOG_DEBUG ("NslWifiPhy:drop packet because of channel switching");
    NotifyRxDrop (packet);
    /*
     * Packets received on the upcoming channel are added to the event list
     * during the switching state. This way the medium can be correctly sensed
     * when the device listens to the channel for the first time after the
     * switching e.g. after channel switching, the channel may be sensed as
     * busy due to other devices' transmissions started before the end of the
     * switching.
     */
    if (endRx > Simulator::Now () + m_state->GetDelayUntilIdle ())
      {
        // that packet will be noise _after_ the completion of the
        // channel switching.
        goto maybeCcaBusy;
      }
    break;
  case NslWifiPhy::RX:
    NS_LOG_DEBUG ("NslWifiPhy:drop packet because already in Rx (power = "<<
                  rxPowerW<<" W)");
    NotifyRxDrop (packet);
    if (endRx > Simulator::Now () + m_state->GetDelayUntilIdle ())
      {
        // that packet will be noise _after_ the reception of the
        // currently-received packet.
        goto maybeCcaBusy;
      }
    break;
  case NslWifiPhy::TX:
    NS_LOG_DEBUG ("NslWifiPhy:drop packet because already in Tx (power = "<<
                  rxPowerW<<" W)");
    NotifyRxDrop (packet);
    if (endRx > Simulator::Now () + m_state->GetDelayUntilIdle ())
      {
        // that packet will be noise _after_ the transmission of the
        // currently-transmitted packet.
        goto maybeCcaBusy;
      }
    break;
  case NslWifiPhy::CCA_BUSY:
  case NslWifiPhy::IDLE:
    if (rxPowerW > m_edThresholdW)
      {
        NS_LOG_DEBUG ("NslWifiPhy:SYNC (power = " << rxPowerW << " W) at Node #" <<
                      m_node->GetId ());
        // drop noise/jamming packet
        if (preamble == WIFI_PREAMBLE_INVALID)
          {
            NS_LOG_DEBUG ("NslWifiPhy:drop **jamming** packet!");
            NotifyRxDrop (packet);
            goto maybeCcaBusy;
          }

        /*
         * Driver interface.
         */
        if (!DriverStartRx (packet, MeasureRss ()))
          {
            NS_LOG_DEBUG ("NslWifiPhy:Ignoring RX! at Node #" << m_node->GetId ());
            NotifyRxDrop (packet);
            return; // still in IDLE or CCA_BUSY
          }

        // sync to signal
        m_state->SwitchToRx (rxDuration);
        NS_ASSERT (m_endRxEvent.IsExpired ());
        NotifyRxBegin (packet);
        m_interference.NotifyRxStart ();
        m_endRxEvent = Simulator::Schedule (rxDuration, &NslWifiPhy::EndReceive,
                                            this, packet, event);
      }
    else  // drop because power too low
      {
        NS_LOG_DEBUG ("NslWifiPhy:drop packet because signal power too Small (" <<
                      rxPowerW << "<" << m_edThresholdW << ")");
        NotifyRxDrop (packet);
        goto maybeCcaBusy;
      }
    break;
  }


  return;

 maybeCcaBusy:
  // We are here because we have received the first bit of a packet and we are
  // not going to be able to synchronize on it
  // In this model, CCA becomes busy when the aggregation of all signals as
  // tracked by the InterferenceHelper class is higher than the CcaBusyThreshold

  Time delayUntilCcaEnd = m_interference.GetEnergyDuration (m_ccaMode1ThresholdW);
  if (!delayUntilCcaEnd.IsZero ())
    {
      m_state->SwitchMaybeToCcaBusy (delayUntilCcaEnd);
    }
}

void
NslWifiPhy::SendPacket (Ptr<const Packet> packet, WifiMode txMode,
                        WifiPreamble preamble, uint8_t txPower)
{
  NS_LOG_FUNCTION (this << packet << txMode << preamble << (uint32_t)txPower);
  /*
   * Transmission can happen if:
   *  - we are syncing on a packet. It is the responsibility of the
   *    MAC layer to avoid doing this but the PHY does nothing to
   *    prevent it.
   *  - we are idle
   */
  NS_ASSERT (!m_state->IsStateTx () && !m_state->IsStateSwitching ());

  Time txDuration = CalculateTxDuration (packet->GetSize (), txMode, preamble);
  if (m_state->IsStateRx ())
    {
      m_endRxEvent.Cancel ();
      m_interference.NotifyRxEnd ();
    }
  NotifyTxBegin (packet);
  uint32_t dataRate500KbpsUnits = txMode.GetDataRate () / 500000;
  bool isShortPreamble = (WIFI_PREAMBLE_SHORT == preamble);
  NotifyPromiscSniffTx (packet, (uint16_t)GetChannelFrequencyMhz (),
                        GetChannelNumber (), dataRate500KbpsUnits, isShortPreamble);
  m_state->SwitchToTx (txDuration, packet, txMode, preamble, txPower);
  NS_LOG_DEBUG ("NslWifiPhy:Calling Send function .. txPower = " <<
                (int) txPower << " in Dbm = " << GetPowerDbm (txPower) <<
                " plus gain = " << m_txGainDb);
  m_channel->Send (this, packet, GetPowerDbm (txPower) + m_txGainDb, txMode, preamble);

  /*
   * Driver interface.
   */
  SetCurrentWifiMode (txMode);
  DriverStartTx (packet, DbmToW (GetPowerDbm (txPower) + m_txGainDb));
}

uint32_t
NslWifiPhy::GetNModes (void) const
{
  return m_modes.size ();
}
WifiMode
NslWifiPhy::GetMode (uint32_t mode) const
{
  return m_modes[mode];
}
uint32_t
NslWifiPhy::GetNTxPower (void) const
{
  return m_nTxPower;
}

void
NslWifiPhy::Configure80211a (void)
{
  NS_LOG_FUNCTION (this);
  m_channelStartingFrequency = 5e3; // 5.000 GHz

  m_modes.push_back (WifiPhy::GetOfdmRate6Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate9Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate12Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate18Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate24Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate36Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate48Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate54Mbps ());
}


void
NslWifiPhy::Configure80211b (void)
{
  NS_LOG_FUNCTION (this);
  m_channelStartingFrequency = 2412; // 2.412 GHz

  m_modes.push_back (WifiPhy::GetDsssRate1Mbps ());
  m_modes.push_back (WifiPhy::GetDsssRate2Mbps ());
  m_modes.push_back (WifiPhy::GetDsssRate5_5Mbps ());
  m_modes.push_back (WifiPhy::GetDsssRate11Mbps ());
}

void
NslWifiPhy::Configure80211_10Mhz (void)
{
  NS_LOG_FUNCTION (this);
  m_channelStartingFrequency = 5e3; // 5.000 GHz, suppose 802.11a

  m_modes.push_back (WifiPhy::GetOfdmRate3MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate4_5MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate6MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate9MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate12MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate18MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate24MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate27MbpsBW10MHz ());
}

void
NslWifiPhy::Configure80211_5Mhz (void)
{
  NS_LOG_FUNCTION (this);
  m_channelStartingFrequency = 5e3; // 5.000 GHz, suppose 802.11a

  m_modes.push_back (WifiPhy::GetOfdmRate1_5MbpsBW5MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate2_25MbpsBW5MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate3MbpsBW5MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate4_5MbpsBW5MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate6MbpsBW5MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate9MbpsBW5MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate12MbpsBW5MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate13_5MbpsBW5MHz ());
}

void
NslWifiPhy::ConfigureHolland (void)
{
  NS_LOG_FUNCTION (this);
  m_channelStartingFrequency = 5e3; // 5.000 GHz
  m_modes.push_back (WifiPhy::GetOfdmRate6Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate12Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate18Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate36Mbps ());
  m_modes.push_back (WifiPhy::GetOfdmRate54Mbps ());
}

void
NslWifiPhy::Configure80211p_CCH (void)
{
  NS_LOG_FUNCTION (this);
  m_channelStartingFrequency = 5e3; // 802.11p works over the 5Ghz freq range

  m_modes.push_back (WifiPhy::GetOfdmRate3MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate4_5MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate6MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate9MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate12MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate18MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate24MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate27MbpsBW10MHz ());
}

void
NslWifiPhy::Configure80211p_SCH (void)
{
  NS_LOG_FUNCTION (this);
  m_channelStartingFrequency = 5e3; // 802.11p works over the 5Ghz freq range

  m_modes.push_back (WifiPhy::GetOfdmRate3MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate4_5MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate6MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate9MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate12MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate18MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate24MbpsBW10MHz ());
  m_modes.push_back (WifiPhy::GetOfdmRate27MbpsBW10MHz ());
}

void 
NslWifiPhy::RegisterListener (WifiPhyListener *listener)
{
  m_state->RegisterListener (listener);
}

bool
NslWifiPhy::IsStateCcaBusy (void)
{
  return m_state->IsStateCcaBusy ();
}

bool
NslWifiPhy::IsStateIdle (void)
{
  return m_state->IsStateIdle ();
}
bool
NslWifiPhy::IsStateBusy (void)
{
  return m_state->IsStateBusy ();
}
bool
NslWifiPhy::IsStateRx (void)
{
  return m_state->IsStateRx ();
}
bool
NslWifiPhy::IsStateTx (void)
{
  return m_state->IsStateTx ();
}
bool
NslWifiPhy::IsStateSwitching (void)
{
  return m_state->IsStateSwitching ();
}

Time
NslWifiPhy::GetStateDuration (void)
{
  return m_state->GetStateDuration ();
}
Time
NslWifiPhy::GetDelayUntilIdle (void)
{
  return m_state->GetDelayUntilIdle ();
}

Time
NslWifiPhy::GetLastRxStartTime (void) const
{
  return m_state->GetLastRxStartTime ();
}

double
NslWifiPhy::DbToRatio (double dB) const
{
  double ratio = pow(10.0,dB/10.0);
  return ratio;
}

double
NslWifiPhy::DbmToW (double dBm) const
{
  double mW = pow(10.0,dBm/10.0);
  return mW / 1000.0;
}

double
NslWifiPhy::WToDbm (double w) const
{
  return 10.0 * log10(w * 1000.0);
}

double
NslWifiPhy::RatioToDb (double ratio) const
{
  return 10.0 * log10(ratio);
}

double
NslWifiPhy::GetEdThresholdW (void) const
{
  return m_edThresholdW;
}

double
NslWifiPhy::GetPowerDbm (uint8_t power) const
{
  NS_ASSERT (m_txPowerBaseDbm <= m_txPowerEndDbm);
  NS_ASSERT (m_nTxPower > 0);
  double dbm;
  if (m_nTxPower > 1)
    {
      dbm = m_txPowerBaseDbm + power * (m_txPowerEndDbm - m_txPowerBaseDbm) / (m_nTxPower - 1);
    }
  else
    {
      NS_ASSERT_MSG (m_txPowerBaseDbm == m_txPowerEndDbm,
                     "cannot have TxPowerEnd != TxPowerStart with TxPowerLevels == 1");
      dbm = m_txPowerBaseDbm;
    }
  return dbm;
}

void
NslWifiPhy::EndReceive (Ptr<Packet> packet, Ptr<InterferenceHelper::Event> event)
{
  NS_LOG_FUNCTION (this << packet << event);
  //NS_ASSERT (IsStateRx ());
  NS_ASSERT (event->GetEndTime () == Simulator::Now ());

  /*
   * Make a copy of the original packet to pass to WirelessModuleUtility.
   */
  Ptr<Packet> copy = packet->Copy ();

  struct InterferenceHelper::SnrPer snrPer;
  snrPer = m_interference.CalculateSnrPer (event);
  m_interference.NotifyRxEnd ();
 WifiTxVector txVector = event->GetTxVector ();

  NS_LOG_DEBUG ("mode=" << (event->GetPayloadMode ().GetDataRate ()) << ", snr=" <<
                snrPer.snr << ", per=" << snrPer.per << ", size=" << packet->GetSize ());
  if (m_random.GetValue () > snrPer.per)
    {
      NotifyRxEnd (packet);
      uint32_t dataRate500KbpsUnits = event->GetPayloadMode ().GetDataRate () / 500000;
      bool isShortPreamble = (WIFI_PREAMBLE_SHORT == event->GetPreambleType ());
      double signalDbm = RatioToDb (event->GetRxPowerW ()) + 30;
      double noiseDbm = RatioToDb(event->GetRxPowerW() / snrPer.snr) - GetRxNoiseFigure() + 30 ;
      NotifyPromiscSniffRx (packet, (uint16_t)GetChannelFrequencyMhz (),
                            GetChannelNumber (), dataRate500KbpsUnits,
                            isShortPreamble, signalDbm, noiseDbm);
      m_state->SwitchFromRxEndOk (packet, snrPer.snr, event->GetPayloadMode (),
                                  event->GetPreambleType ());
      /*
       * Driver interface.
       */
      DriverEndRx (copy, snrPer.packetRss, true);
    }
  else
    {
      /* failure. */
      NotifyRxDrop (packet);
      m_state->SwitchFromRxEndError (packet, snrPer.snr);
      /*
       * Driver interface.
       */
      DriverEndRx (copy, snrPer.packetRss, false);
    }
}

/*
 * Start of added function for driver support.
 */

void
NslWifiPhy::SetNode (Ptr<Node> nodePtr)
{
  NS_LOG_FUNCTION (this << nodePtr);
  m_node = nodePtr;
}

void
NslWifiPhy::ResetDriver (void)
{
  NS_LOG_FUNCTION (this);
  m_isDriverInitialized = false;
  m_utility = NULL;
}

void
NslWifiPhy::InitDriver (void)
{
  NS_LOG_FUNCTION (this);
  if (!m_isDriverInitialized)
    {
      NS_LOG_DEBUG ("NslWifiPhy:Driver being initialized at Node #" << m_node->GetId ());
      // setting default wifi mode
      SetCurrentWifiMode (m_modes[0]);
      m_utility = m_node->GetObject<WirelessModuleUtility> ();
      if (m_utility != NULL)
        {
          m_utility->SetRssMeasurementCallback (MakeCallback (&NslWifiPhy::MeasureRss, this));
          m_utility->SetSendPacketCallback (MakeCallback (&NslWifiPhy::UtilitySendPacket, this));
          m_utility->SetChannelSwitchCallback (MakeCallback (&NslWifiPhy::SetChannelNumber, this));
          UpdatePhyLayerInfo ();
        }
      m_isDriverInitialized = true;
    }
  else
    {
      NS_LOG_DEBUG ("NslWifiPhy:Driver already initialized at Node #" << m_node->GetId ());
    }
  // show some debug messages
  if (m_utility == NULL)
    {
      NS_LOG_DEBUG ("NslWifiPhy:Utility module is *not* installed on Node #" << m_node->GetId ());
    }
}

void
NslWifiPhy::DriverStartTx (Ptr<const Packet> packet, double txPower)
{
  NS_LOG_FUNCTION (this << packet << txPower);
  // notify utility for start of TX
  if (m_utility != NULL)
    {
      m_utility->StartTxHandler (packet, txPower);
    }
  else
    {
      NS_LOG_DEBUG ("NslWifiPhy:Utility module is *not* installed on Node #" << m_node->GetId ());
    }
  // schedule DriverEndTx
  Simulator::Schedule (m_state->GetDelayUntilIdle (), &NslWifiPhy::DriverEndTx, this, packet, txPower);
}

void
NslWifiPhy::DriverEndTx (Ptr<const Packet> packet, double txPower)
{
  NS_LOG_FUNCTION (this << packet << txPower);

  /*
   * TX can not be interrupted. Hence we do not have to check state within this
   * function.
   */

  // notify utility for end of TX
  if (m_utility != NULL)
    {
      m_utility->EndTxHandler (packet, txPower);
    }
  else
    {
      NS_LOG_DEBUG ("NslWifiPhy:Utility module is *not* installed on Node #" << m_node->GetId ());
    }
}

bool
NslWifiPhy::DriverStartRx (Ptr<Packet> packet, double startRssW)
{
  NS_LOG_FUNCTION (this << packet << startRssW);

  bool isPacketToBeReceived = true;

  // notify utility for start of RX
  if (m_utility != NULL)
    {
      isPacketToBeReceived =  m_utility->StartRxHandler (packet, startRssW);
    }
  else
    {
      NS_LOG_DEBUG ("NslWifiPhy:Utility module is *not* installed on Node #" << m_node->GetId ());
    }

  return isPacketToBeReceived;
}

void
NslWifiPhy::DriverEndRx (Ptr<Packet> packet, double averageRssW,
                         const bool isSuccessfullyReceived)
{
  NS_LOG_FUNCTION (this << packet << averageRssW << isSuccessfullyReceived);

  // notify utility for end of RX
  if (m_utility != 0)
    {
      m_utility->EndRxHandler (packet, averageRssW, isSuccessfullyReceived);
    }
  else
    {
      NS_LOG_DEBUG ("NslWifiPhy:Utility module is *not* installed on Node #" << m_node->GetId ());
    }
}

void
NslWifiPhy::SetCurrentWifiMode (WifiMode mode)
{
  NS_LOG_FUNCTION (this);
  m_currentWifiMode = mode;
  // notify utility
  if (m_utility)
    {
      UpdatePhyLayerInfo ();
    }
  else
    {
      NS_LOG_DEBUG ("NslWifiPhy:Utility is *not* installed on Node #" << m_node->GetId ());
    }
}

double
NslWifiPhy::MeasureRss (void)
{
  NS_LOG_FUNCTION (this);
  return m_interference.CurrentNodeRss (m_currentWifiMode);
}

void
NslWifiPhy::UtilitySendPacket(Ptr<Packet> packet, double &powerW, int utilitySendMode)
{
  NS_LOG_FUNCTION (this << packet << powerW << utilitySendMode);

  // Convert power in Watts to a power level
  uint8_t powerLevel;
  powerLevel = (uint8_t)(m_nTxPower * (WToDbm(powerW) - m_txPowerBaseDbm) /
               (m_txPowerEndDbm - m_txPowerBaseDbm));

  if (powerLevel >= 0 && powerLevel < m_nTxPower)
    {
      NS_LOG_DEBUG ("NslWifiPhy:Inside send packet callback at node #" <<
                    m_node->GetId() << ". Sending packet.");
      switch (utilitySendMode)
        {
        case WirelessModuleUtility::SEND_AS_JAMMER:
          NS_LOG_DEBUG ("NslWifiPhy: Sending packet as jammer.");
          SendPacket (packet, m_currentWifiMode, WIFI_PREAMBLE_INVALID, powerLevel);
          break;
        case WirelessModuleUtility::SEND_AS_HONEST:
          {
            WifiMacHeader hdr;
            hdr.SetType (WIFI_MAC_DATA);
            packet->AddHeader (hdr);
            NS_LOG_DEBUG ("NslWifiPhy: Sending packet as honest node.");
            SendPacket (packet, m_currentWifiMode, WIFI_PREAMBLE_LONG, powerLevel);
          }
          break;
        case WirelessModuleUtility::SEND_AS_OTHERS:
          NS_FATAL_ERROR ("NslWifiPhy:Undefined utility send packet mode!");
          break;
        default:
          break;
        }
      // update the actual TX power
      powerW = DbmToW (m_txPowerBaseDbm);
      powerW += powerLevel * DbmToW ((m_txPowerEndDbm - m_txPowerBaseDbm) / m_nTxPower);
    }
  else
    {
      NS_LOG_DEBUG ("NslWifiPhy: Node # "<< m_node->GetId () <<
                    "Error in send packet callback. Incorrect power level.");
      // set sent power to 0 to indicate error
      powerW = 0;
    }
}

void
NslWifiPhy::UpdatePhyLayerInfo (void)
{
  NS_LOG_FUNCTION (this);
  m_phyLayerInfo.currentChannel = m_channelNumber;
  m_phyLayerInfo.maxTxPowerW = DbmToW (m_txPowerEndDbm);
  m_phyLayerInfo.minTxPowerW = DbmToW (m_txPowerBaseDbm);
  m_phyLayerInfo.TxGainDb = m_txGainDb;
  m_phyLayerInfo.RxGainDb = m_rxGainDb;
  m_phyLayerInfo.numOfChannels = 11;  // XXX assuming US standard
  m_phyLayerInfo.phyRate = m_currentWifiMode.GetDataRate ();
  m_phyLayerInfo.channelSwitchDelay = m_channelSwitchDelay;
  // notify utility
  if (m_utility != NULL)
    {
      m_utility->SetPhyLayerInfo (m_phyLayerInfo);
    }
  else
    {
      NS_LOG_DEBUG ("NslWifiPhy:Utility is *not* installed on Node #" <<
                    m_node->GetId ());
    }
}

} // namespace ns3